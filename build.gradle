plugins {
    id 'de.dfki.mary.voicebuilding-legacy' version '5.2.0'
    id "de.undercouch.download" version "3.2.0"
}

group 'de.uni-saarland.coli.voicebuilding2017.group3'
version '0.1-SNAPSHOT'

voice {
    name = 'voicebuilding2017-group3'
    gender = 'female'
}

import org.apache.tools.ant.taskdefs.condition.Os

task downloadWavZip(type: de.undercouch.gradle.tasks.download.Download) {
    src 'https://github.com/insa-k/voicebuilding2017-group3-data/releases/download/wav/wav.zip'
    dest "resources/"
    overwrite false
}

task unpackWav(type: Copy) {
    dependsOn downloadWavZip
    from zipTree("resources/wav.zip")
    into "resources/wav/"
    dependsOn downloadWavZip
}

task setupBuildDirectory {
   if ( Os.isFamily(Os.FAMILY_MAC) | Os.isFamily(Os.FAMILY_UNIX)) {
	exec {
            commandLine 'sh', "setupBuildDirectory.sh"
        }
}
   else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
	println "TODO: Write script for creating build directory under windows!!"
}
}

task convertTextGrids {
    ext.labDir = file("$buildDir/lab_maus")
    outputs.dir labDir
    doLast {
        labDir.mkdirs()
        def scriptFile = file("$temporaryDir/script.praat")
        scriptFile.withWriter { script ->
            fileTree(buildDir).include('TextGrid/*.TextGrid').each { textGridFile ->
                def labFile = file("$labDir/${textGridFile.name - 'TextGrid' + 'lab'}")
                script.println "Read from file... $textGridFile"
                script.println "Extract tier... 1"
                script.println "Save as Xwaves label file... $labFile"
                script.println "printline Wrote $labFile.name"
            }
        }
        exec {
            commandLine 'praat', '--run', scriptFile
        }
    }
}

task remapLabels(type: Copy) {
    from convertTextGrids.labDir
    into "$buildDir/lab"
    dependsOn convertTextGrids
    filter {
        def phoneMapping = [
                '<p:>': '_',
                'i:'  : 'i',
                'O:'  : 'O',
                '3`'  : 'r=',
                'Q'   : 'A',
                'R'   : 'r',
                'u:'  : 'u',
                'aI'  : 'AI',
                'eI'  : 'EI'
        ]
        def fields = it.tokenize()
        if (fields.size() == 3) {
            fields[-1] = phoneMapping[fields[-1]] ?: fields[-1]
        }
        fields.join(' ')
    }
}

legacyInit {
    dependsOn unpackWav, setupBuildDirectory, remapLabels
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'groovy-all') {
            details.useTarget group: details.requested.group, name: details.requested.name, version: '2.4.7'
        }
    }
}

